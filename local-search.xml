<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>安卓开机动画</title>
    <link href="/2023/01/25/%E5%AE%89%E5%8D%93%E5%BC%80%E6%9C%BA%E5%8A%A8%E7%94%BB/"/>
    <url>/2023/01/25/%E5%AE%89%E5%8D%93%E5%BC%80%E6%9C%BA%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="安卓S开机动画流程"><a href="#安卓S开机动画流程" class="headerlink" title="安卓S开机动画流程"></a>安卓S开机动画流程</h1><p>开机动画是<strong>在SurfaceFlinger实例通过调用startBootAnim()启动的</strong>，BootAnim是如何启动和结束的，总体框架图如下：</p><img src="/2023/01/25/%E5%AE%89%E5%8D%93%E5%BC%80%E6%9C%BA%E5%8A%A8%E7%94%BB/整体架构2.png"><h2 id="1-SurfaceFlinger进程启动"><a href="#1-SurfaceFlinger进程启动" class="headerlink" title="1.SurfaceFlinger进程启动"></a>1.SurfaceFlinger进程启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">/frameworks/native/services/surfaceflinger/surfaceflinger.rc</span><br>service surfaceflinger /system/bin/surfaceflinger<br>    class core animation<br>    user system<br>    group graphics drmrpc readproc<br>    capabilities SYS_NICE<br>    onrestart restart zygote<br>    task_profiles HighPerformance<br>    socket pdx/system/vr/display/client     stream 0666 system graphics u:object_r:pdx_display_client_endpoint_socket:s0<br>    socket pdx/system/vr/display/manager    stream 0666 system graphics u:object_r:pdx_display_manager_endpoint_socket:s0<br>    socket pdx/system/vr/display/vsync      stream 0666 system graphics u:object_r:pdx_display_vsync_endpoint_socket:s0<br><br></code></pre></td></tr></table></figure><p>init进程会根据surfaceflinger.rc配置启动surfaceflinger进程，surfaceflinger进程(&#x2F;system&#x2F;bin&#x2F;surfaceflinger)启动，会走到main函数里面。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">/frameworks/native/services/surfaceflinger/Android.bp</span><br>filegroup &#123;<br>    name: &quot;surfaceflinger_binary_sources&quot;,<br>    srcs: [<br>        &quot;:libsurfaceflinger_sources&quot;,<br>        &quot;main_surfaceflinger.cpp&quot;,<br>    ],<br>&#125;<br><br>cc_binary &#123;<br>    name: &quot;surfaceflinger&quot;,<br>    defaults: [&quot;libsurfaceflinger_binary&quot;],<br>    init_rc: [&quot;surfaceflinger.rc&quot;],<br>    srcs: [<br>        &quot;:surfaceflinger_binary_sources&quot;,<br>        // Note: SurfaceFlingerFactory is not in the filegroup so that it<br>        // can be easily replaced.<br>        &quot;SurfaceFlingerFactory.cpp&quot;,<br>    ],<br>    shared_libs: [<br>        &quot;libSurfaceFlingerProp&quot;,<br>    ],<br><br>     logtags: [&quot;EventLog/EventLogTags.logtags&quot;],<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到编译surfaceflinger二进制进程的源文件为<code>surfaceflinger_binary_sources</code>和<code>SurfaceFlingerFactory.cpp</code>，其中surfaceflinger_binary_sources来源于<code>main_surfaceflinger.cpp</code></p><h2 id="2-注册启动surfaceflinger服务"><a href="#2-注册启动surfaceflinger服务" class="headerlink" title="2.注册启动surfaceflinger服务"></a>2.注册启动surfaceflinger服务</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// /frameworks/native/services/surfaceflinger/main_surfaceflinger.cpp</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">char</span>**)</span> </span>&#123;<br><span class="hljs-comment">// ...</span><br><br>    sp&lt;SurfaceFlinger&gt; flinger = surfaceflinger::<span class="hljs-built_in">createSurfaceFlinger</span>(); <span class="hljs-comment">//创建surfaceflinger服务实例</span><br><br><span class="hljs-comment">// ...</span><br>    flinger-&gt;<span class="hljs-built_in">init</span>();  <span class="hljs-comment">// 初始化flinger实例</span><br><br>    <span class="hljs-comment">// 向ServiceManager注册surfaceflinger服务</span><br>    <span class="hljs-function">sp&lt;IServiceManager&gt; <span class="hljs-title">sm</span><span class="hljs-params">(defaultServiceManager())</span></span>;<br>    sm-&gt;<span class="hljs-built_in">addService</span>(<span class="hljs-built_in">String16</span>(SurfaceFlinger::<span class="hljs-built_in">getServiceName</span>()), flinger, <span class="hljs-literal">false</span>,<br>                   IServiceManager::DUMP_FLAG_PRIORITY_CRITICAL | IServiceManager::DUMP_FLAG_PROTO);<br><br><span class="hljs-comment">// ...</span><br><br>    flinger-&gt;<span class="hljs-built_in">run</span>();   <span class="hljs-comment">// 启动surfaceflinger服务</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用SurfaceFlinger对象的init方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// /frameworks/native/services/surfaceflinger/SurfaceFlinger.cpp</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SurfaceFlinger::init</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    mStartPropertySetThread = <span class="hljs-built_in">getFactory</span>().<span class="hljs-built_in">createStartPropertySetThread</span>(presentFenceReliable);<br><br>    <span class="hljs-keyword">if</span> (mStartPropertySetThread-&gt;<span class="hljs-built_in">Start</span>() != NO_ERROR) &#123;<br>        <span class="hljs-built_in">ALOGE</span>(<span class="hljs-string">&quot;Run StartPropertySetThread failed!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">ALOGV</span>(<span class="hljs-string">&quot;Done initializing&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>SurfaceFlinger调用init方法时会获取mStartPropertySetThread，调用该对象的Start方法，其实是准备启动一个线程去启动BootAnimation</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// /frameworks/native/services/surfaceflinger/StartPropertySetThread.cpp</span><br><span class="hljs-function"><span class="hljs-type">status_t</span> <span class="hljs-title">StartPropertySetThread::Start</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">run</span>(<span class="hljs-string">&quot;SurfaceFlinger::StartPropertySetThread&quot;</span>, PRIORITY_NORMAL);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StartPropertySetThread::threadLoop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// Set property service.sf.present_timestamp, consumer need check its readiness</span><br>    <span class="hljs-built_in">property_set</span>(kTimestampProperty, mTimestampPropertyValue ? <span class="hljs-string">&quot;1&quot;</span> : <span class="hljs-string">&quot;0&quot;</span>);<br>    <span class="hljs-comment">// 清除BootAnimation退出标志位service.bootanim.exit</span><br>    <span class="hljs-built_in">property_set</span>(<span class="hljs-string">&quot;service.bootanim.exit&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>    <span class="hljs-comment">// 设置bootanim的进度为0</span><br>    <span class="hljs-built_in">property_set</span>(<span class="hljs-string">&quot;service.bootanim.progress&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>    <span class="hljs-comment">// 通过service.bootanim.exit</span><br>    <span class="hljs-built_in">property_set</span>(<span class="hljs-string">&quot;ctl.start&quot;</span>, <span class="hljs-string">&quot;bootanim&quot;</span>);<br>    <span class="hljs-comment">// 立即退出</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>这里一开始看起来比较疑惑，首先是StartPropertySetThread::Start函数，在<code>StartPropertySetThread.h</code>表明StartPropertySetThread继承自父类Thread，而父类Thread是由&lt;utils&#x2F;Thread.h&gt; 引入的，所以这里是子类引用父类方法，这里的run函数就是就是thread的run方法。这里会启动一个线程去运行，线程名为”StartPropertySetThread”，线程优先级为PRIORITY_NORMAL。线程启动以后，最终会调用 <code>_threadLoop</code> 函数，它会去调用threadLoop函数。这里整个函数调用栈就清楚了：</li></ul><img src="/2023/01/25/%E5%AE%89%E5%8D%93%E5%BC%80%E6%9C%BA%E5%8A%A8%E7%94%BB/线程函数调用.png"><ul><li>当系统属性发生改变时，init进程就会接收到一个系统属性变化通知，这个通知最终是由在init进程中的函数handle_property_set_fd来处理</li></ul><h2 id="3-bootanim进程启动"><a href="#3-bootanim进程启动" class="headerlink" title="3.bootanim进程启动"></a>3.bootanim进程启动</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// /frameworks/base/cmds/bootanimation/bootanimation_main.cpp</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    setpriority(PRIO_PROCESS, <span class="hljs-number">0</span>, ANDROID_PRIORITY_DISPLAY);<br><br>    <span class="hljs-type">bool</span> noBootAnimation = bootAnimationDisabled();<br>    ALOGI_IF(noBootAnimation,  <span class="hljs-string">&quot;boot animation disabled&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!noBootAnimation) &#123;<br>        <span class="hljs-comment">// 启动Binder线程池</span><br>        sp&lt;ProcessState&gt; <span class="hljs-title function_">proc</span><span class="hljs-params">(ProcessState::self())</span>;<br>        ProcessState::self()-&gt;startThreadPool();<br>        <br>        sp&lt;BootAnimation&gt; boot = new BootAnimation(audioplay::createAnimationCallbacks());<br><br>        waitForSurfaceFlinger();<br>        <br>        boot-&gt;run(<span class="hljs-string">&quot;BootAnimation&quot;</span>, PRIORITY_DISPLAY);<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">bootAnimationDisabled</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> value[PROPERTY_VALUE_MAX];<br>    <span class="hljs-comment">// 如果debug.sf.nobootanimation=1，则不会显示动画</span><br>    property_get(<span class="hljs-string">&quot;debug.sf.nobootanimation&quot;</span>, value, <span class="hljs-string">&quot;0&quot;</span>);<br>    <span class="hljs-keyword">if</span> (atoi(value) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><span class="hljs-comment">// 如果ro.boot.quiescent=1，则不显示开机动画</span><br>    property_get(<span class="hljs-string">&quot;ro.boot.quiescent&quot;</span>, value, <span class="hljs-string">&quot;0&quot;</span>);<br>    <span class="hljs-keyword">if</span> (atoi(value) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// Only show the bootanimation for quiescent boots if this system property is set to enabled</span><br>        <span class="hljs-keyword">if</span> (!property_get_bool(<span class="hljs-string">&quot;ro.bootanim.quiescent.enabled&quot;</span>, <span class="hljs-literal">false</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>判断完BootAnimation是不是disabled之后，如果noBootAnimation为false，则创建一个BootAnimation对象。创建完了BootAnimation对象后，调用其run方法，由于BootAnimation也继承了Thread，所以最终也会走到对应的threadLoop方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">BootAnimation::threadLoop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">bool</span> r;<br><br>    <span class="hljs-keyword">if</span> (mZipFileName == <span class="hljs-literal">NULL</span>) &#123;<br>        ...<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        r = <span class="hljs-built_in">movie</span>();  <span class="hljs-comment">// 调用movie方法</span><br>    &#125;<br>    <span class="hljs-comment">// 销毁 opengl 和 egl</span><br>    <span class="hljs-built_in">eglMakeCurrent</span>(mDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);<br>    <span class="hljs-built_in">eglDestroyContext</span>(mDisplay, mContext);<br>    <span class="hljs-built_in">eglDestroySurface</span>(mDisplay, mSurface);<br>    mFlingerSurface.<span class="hljs-built_in">clear</span>();<br>    mFlingerSurfaceControl.<span class="hljs-built_in">clear</span>();<br>    <span class="hljs-built_in">eglTerminate</span>(mDisplay);<br>    IPCThreadState::<span class="hljs-built_in">self</span>()-&gt;<span class="hljs-built_in">stopProcess</span>();<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">BootAnimation::movie</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    String8 desString;<br>    <span class="hljs-comment">// 读取 desc.txt 配置文件</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">readFile</span>(<span class="hljs-string">&quot;desc.txt&quot;</span>, desString)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-type">char</span> <span class="hljs-type">const</span>* s = desString.<span class="hljs-built_in">string</span>();<br><br>    <span class="hljs-comment">// 解析描述文件</span><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        ...<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i=<span class="hljs-number">0</span> ; i&lt;pcount ; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> r=<span class="hljs-number">0</span> ; !part.count || r&lt;part.count ; r++) &#123;<br>            <span class="hljs-comment">// opengl 绘制操作</span><br>            <span class="hljs-built_in">glClearColor</span>(<br>                    part.backgroundColor[<span class="hljs-number">0</span>],<br>                    part.backgroundColor[<span class="hljs-number">1</span>],<br>                    part.backgroundColor[<span class="hljs-number">2</span>],<br>                    <span class="hljs-number">1.0f</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> j=<span class="hljs-number">0</span> ; j&lt;fcount &amp;&amp; (!<span class="hljs-built_in">exitPending</span>() || part.playUntilComplete) ; j++) &#123;<br>                <span class="hljs-function"><span class="hljs-type">const</span> Animation::Frame&amp; <span class="hljs-title">frame</span><span class="hljs-params">(part.frames[j])</span></span>;<br>                <span class="hljs-type">nsecs_t</span> lastFrame = <span class="hljs-built_in">systemTime</span>();<br>                ...<br>                <span class="hljs-keyword">if</span> (r &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, frame.tid);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    ...<br>                    <span class="hljs-built_in">initTexture</span>(frame);<br>                &#125;<br>                <br>                <span class="hljs-comment">// specify the y center as ceiling((mHeight - animation.height) / 2)</span><br>                <span class="hljs-comment">// which is equivalent to mHeight - (yc + animation.height)</span><br>                <span class="hljs-built_in">glDrawTexiOES</span>(xc, mHeight - (yc + animation.height),<br>                              <span class="hljs-number">0</span>, animation.width, animation.height);<br>                <span class="hljs-built_in">eglSwapBuffers</span>(mDisplay, mSurface);<br><br>                <span class="hljs-comment">// 不断绘制时检测是否需要退出</span><br>                <span class="hljs-built_in">checkExit</span>();<br>            &#125;<br>            <span class="hljs-comment">// 如果退出了就跳出结束绘制</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">exitPending</span>() &amp;&amp; !part.count)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// free the textures for this part</span><br>        <span class="hljs-keyword">if</span> (part.count != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> j=<span class="hljs-number">0</span> ; j&lt;fcount ; j++) &#123;<br>                <span class="hljs-function"><span class="hljs-type">const</span> Animation::Frame&amp; <span class="hljs-title">frame</span><span class="hljs-params">(part.frames[j])</span></span>;<br>                <span class="hljs-built_in">glDeleteTextures</span>(<span class="hljs-number">1</span>, &amp;frame.tid);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// 读取 service.bootanim.exit 值是否是 1 </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EXIT_PROP_NAME <span class="hljs-string">&quot;service.bootanim.exit&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BootAnimation::checkExit</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// Allow surface flinger to gracefully request shutdown</span><br>    <span class="hljs-type">char</span> value[PROPERTY_VALUE_MAX];<br>    <span class="hljs-built_in">property_get</span>(EXIT_PROP_NAME, value, <span class="hljs-string">&quot;0&quot;</span>);<br>    <span class="hljs-type">int</span> exitnow = <span class="hljs-built_in">atoi</span>(value);<br>    <span class="hljs-keyword">if</span> (exitnow) &#123;<br>        <span class="hljs-built_in">requestExit</span>();<br>        <span class="hljs-keyword">if</span> (mAudioPlayer != <span class="hljs-literal">NULL</span>) &#123;<br>            mAudioPlayer-&gt;<span class="hljs-built_in">requestExit</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动动画底层采用的是 opengles 的方式来渲染绘制的，绘制的内容是本地的一个启动动画资源包，在绘制的过程中会不断的判断是否需要退出，读取的字段是 service.bootanim.exit ，为 1 代表需要 break 退出循环绘制。因此我们只需要找到 service.bootanim.exit 在哪里设置为 1 的，便可找到退出启动动画的入口。关闭动画的入口还是在 SurfaceFlinger 中只是这个调用流程比较复杂而已：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-type">void</span> <span class="hljs-title">handleResumeActivity</span><span class="hljs-params">(IBinder token,</span></span><br><span class="hljs-params"><span class="hljs-function">                                boolean clearHide, boolean isForward, boolean reallyResume)</span> </span>&#123;<br>    ActivityClientRecord r = <span class="hljs-built_in">performResumeActivity</span>(token, clearHide);<br>    <span class="hljs-keyword">if</span> (r != null) &#123;<br>        <span class="hljs-keyword">if</span> (!r.onlyLocalRequest) &#123;<br>            r.nextIdle = mNewActivities;<br>            mNewActivities = r;<br>            <span class="hljs-comment">// 添加了一个 IdleHandler 消息</span><br>            Looper.<span class="hljs-built_in">myQueue</span>().<span class="hljs-built_in">addIdleHandler</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Idler</span>());<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> Idler implements MessageQueue.IdleHandler &#123;<br>    @Override<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> boolean <span class="hljs-built_in">queueIdle</span>() &#123;<br>        ActivityClientRecord a = mNewActivities;<br>        <span class="hljs-keyword">if</span> (a != null) &#123;<br>            mNewActivities = null;<br>            IActivityManager am = ActivityManagerNative.<span class="hljs-built_in">getDefault</span>();<br>            ActivityClientRecord prev;<br>            <span class="hljs-keyword">do</span> &#123;<br>                <span class="hljs-keyword">if</span> (a.activity != null &amp;&amp; !a.activity.mFinished) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">// 调用 AMS 的 activityIdle</span><br>                        am.<span class="hljs-built_in">activityIdle</span>(a.token, a.createdConfig, stopProfiling);<br>                    &#125; <span class="hljs-built_in">catch</span> (RemoteException ex) &#123;<br>                        <span class="hljs-comment">// Ignore</span><br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">while</span> (a != null);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><br>@<span class="hljs-function">Override</span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">void</span> <span class="hljs-title">activityIdle</span><span class="hljs-params">(IBinder token, Configuration config, boolean stopProfiling)</span> </span>&#123;<br>    <span class="hljs-built_in">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>        ActivityStack stack = ActivityRecord.<span class="hljs-built_in">getStackLocked</span>(token);<br>        <span class="hljs-keyword">if</span> (stack != null) &#123;<br>            ActivityRecord r = mStackSupervisor.<span class="hljs-built_in">activityIdleInternalLocked</span>(token, <span class="hljs-literal">false</span>, config);<br>        &#125;<br>    &#125;<br>    Binder.<span class="hljs-built_in">restoreCallingIdentity</span>(origId);<br>&#125;<br><br><span class="hljs-comment">// Checked.</span><br><span class="hljs-function"><span class="hljs-keyword">final</span> ActivityRecord <span class="hljs-title">activityIdleInternalLocked</span><span class="hljs-params">(<span class="hljs-keyword">final</span> IBinder token, boolean fromTimeout,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                Configuration config)</span> </span>&#123;<br>    ActivityRecord r = ActivityRecord.forTokenLocked(token);<br>    <span class="hljs-keyword">if</span> (r != null) &#123;<br>        ...<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isFrontStack</span>(r.task.stack) || fromTimeout) &#123;<br>                booting = <span class="hljs-built_in">checkFinishBootingLocked</span>();<br>            &#125;<br>    &#125;<br>    ...<br>        <span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> boolean <span class="hljs-title">checkFinishBootingLocked</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> boolean booting = mService.mBooting;<br>    boolean enableScreen = <span class="hljs-literal">false</span>;<br>    mService.mBooting = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (!mService.mBooted) &#123;<br>        mService.mBooted = <span class="hljs-literal">true</span>;<br>        enableScreen = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (booting || enableScreen) &#123;<br>        mService.<span class="hljs-built_in">postFinishBooting</span>(booting, enableScreen);<br>    &#125;<br>    <span class="hljs-keyword">return</span> booting;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">enableScreenAfterBoot</span><span class="hljs-params">()</span> </span>&#123;<br>    mWindowManager.<span class="hljs-built_in">enableScreenAfterBoot</span>();<br>    <span class="hljs-built_in">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>        <span class="hljs-built_in">updateEventDispatchingLocked</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">performEnableScreen</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">synchronized</span>(mWindowMap) &#123;<br>        <span class="hljs-keyword">if</span> (!mBootAnimationStopped) &#123;<br>            <span class="hljs-comment">// 向SurfaceFlinger 进程发起关闭开机界面的消息</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                IBinder surfaceFlinger = ServiceManager.<span class="hljs-built_in">getService</span>(<span class="hljs-string">&quot;SurfaceFlinger&quot;</span>);<br>                <span class="hljs-keyword">if</span> (surfaceFlinger != null) &#123;<br>                    Parcel data = Parcel.<span class="hljs-built_in">obtain</span>();<br>                    data.<span class="hljs-built_in">writeInterfaceToken</span>(<span class="hljs-string">&quot;android.ui.ISurfaceComposer&quot;</span>);<br>                    <span class="hljs-comment">// 向SurfaceComposer发送</span><br>                    surfaceFlinger.<span class="hljs-built_in">transact</span>(IBinder.FIRST_CALL_TRANSACTION, <span class="hljs-comment">// BOOT_FINISHED</span><br>                                            data, null, <span class="hljs-number">0</span>);<br>                    data.<span class="hljs-built_in">recycle</span>();<br>                &#125;<br>            &#125; <span class="hljs-built_in">catch</span> (RemoteException ex) &#123;<br>                ...<br>            &#125;<br>            mBootAnimationStopped = <span class="hljs-literal">true</span>;<br>        &#125;<br>        ...<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// ----------------------------------------------------------------------</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">ISurfaceComposerTag</span> &#123;<br>    BOOT_FINISHED = IBinder::FIRST_CALL_TRANSACTION,<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// /frameworks/native/libs/gui/ISurfaceComposer.cpp</span><br><span class="hljs-type">status_t</span> BnSurfaceComposer::<span class="hljs-built_in">onTransact</span>(<br>    <span class="hljs-type">uint32_t</span> code, <span class="hljs-type">const</span> Parcel&amp; data, Parcel* reply, <span class="hljs-type">uint32_t</span> flags)&#123;<br>    <span class="hljs-keyword">switch</span>(code) &#123;<br>            <span class="hljs-comment">// ...</span><br>        <span class="hljs-keyword">case</span> BOOT_FINISHED: &#123;<br>            <span class="hljs-built_in">CHECK_INTERFACE</span>(ISurfaceComposer, data, reply);<br>            <span class="hljs-built_in">bootFinished</span>();<br>            <span class="hljs-keyword">return</span> NO_ERROR;<br>        &#125;<br>            <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// ----------------------------------------------------------------------</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SurfaceFlinger::bootFinished</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 把 service.bootanim.exit 属性设置为 1 ，bootanim 进程读到 1 时就会退出开机启动动画</span><br>    <span class="hljs-built_in">property_set</span>(<span class="hljs-string">&quot;service.bootanim.exit&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>关闭开机启动动画的流程还是比较复杂的，我们来缕一缕整个逻辑，我们的 Launcher 进程启动后会启动我们 Launcher Activity 界面，而 Activity 的生命周期调用都是由 ActivityThread 来执行的，其中就会执行到 handleResumeActivity 方法，在该方法中会添加一个 IdleHandler 消息，会调用到 AMS 的 activityIdle 方法，AMS 会调用 WMS 的 enableScreenAfterBoot 方法，WMS 会跨进程通知 SurfaceFlinger 去关闭我们的开机启动动画。</p><h2 id="4-开机动画包里有什么"><a href="#4-开机动画包里有什么" class="headerlink" title="4.开机动画包里有什么"></a>4.开机动画包里有什么</h2><p>这里建议先看一下官方文档：&#x2F;frameworks&#x2F;base&#x2F;cmds&#x2F;bootanimation&#x2F;FORMAT.md</p><p>开机动画指的是以bootanimation.zip方式存在，启动的时候会依次选择一个bootanimation.zip加载</p><ol><li>&#x2F;system&#x2F;media&#x2F;bootanimation-encrypted.zip (if getprop(“vold.decrypt”) &#x3D; ‘1’)</li><li>&#x2F;system&#x2F;media&#x2F;bootanimation.zip</li><li>&#x2F;oem&#x2F;media&#x2F;bootanimation.zip</li></ol><p><code>bootanimation.zip</code> 文件中包含：</p><img src="/2023/01/25/%E5%AE%89%E5%8D%93%E5%BC%80%E6%9C%BA%E5%8A%A8%E7%94%BB/压缩文件.png"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">desc.txt - a text file<br>part0  \<br>part1   \  directories full of PNG frames<br>...     /<br>partN  /<br></code></pre></td></tr></table></figure><p><strong>“desc.txt”</strong>：<strong>用来描述用户自定义的开机动画是如何显示的</strong>。</p><p>以下面的例子为例：</p><blockquote><p>1280 720 1</p><p>p 1 1 part0</p><p>p 0 1 part1</p></blockquote><p>第一行的三个数字分别表示开机动画在屏幕中的显示宽度、高度以及帧速(fps)。剩余的每一行都用来描述一个动画片断，这些行必须要以字符“p”来开头，后面紧跟着两个数字以及一个文件目录路径名称。</p><p>第一个数字表示一个片断的循环显示次数，如果它的值等于0，那么就表示无限循环地显示该动画片断。</p><p>第二个数字表示每一个片断在两次循环显示之间的时间间隔。这个时间间隔是以一个帧的时间为单位的。</p><p>文件目录下面保存的是一系列png文件，这些png文件会被依次显示在屏幕中。</p><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><ul><li><a href="https://blog.51cto.com/u_11176305/3796348">https://blog.51cto.com/u_11176305/3796348</a></li><li><a href="https://www.cnblogs.com/lufeibin/p/13529981.html">https://www.cnblogs.com/lufeibin/p/13529981.html</a></li><li><a href="https://blog.csdn.net/weixin_36044720/article/details/117277602?spm=1001.2014.3001.5506">https://blog.csdn.net/weixin_36044720/article/details/117277602?spm=1001.2014.3001.5506</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Android-Treble计划</title>
    <link href="/2023/01/14/Android-Treble%E8%AE%A1%E5%88%92/"/>
    <url>/2023/01/14/Android-Treble%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<ul><li>🕊️本文来自视频：<a href="https://www.youtube.com/watch?v=zbebx1Kvqho">https://www.youtube.com/watch?v=zbebx1Kvqho</a></li><li>引用部分博客：<a href="https://new.qq.com/rain/a/20191016A070PF00">https://new.qq.com/rain/a/20191016A070PF00</a></li><li><a href="https://www.freesion.com/article/69471423144/">https://www.freesion.com/article/69471423144/</a></li></ul><h2 id="1-Andriod进入Treble之前存在什么问题"><a href="#1-Andriod进入Treble之前存在什么问题" class="headerlink" title="1.Andriod进入Treble之前存在什么问题"></a>1.Andriod进入Treble之前存在什么问题</h2><p>在Android 8.0（Android Oreo）之前那个时代，苹果手机一旦有了新的系统更新，用户都能在短时间内更新系统，对用户来说实在太简单了，用户只需要点击更新下载新系统就可以完美的拥有最新的系统功能。而对于安卓用户而言，当安卓发布新的源码以后，会经过下面一系列的操作，用户才能用上真正的全新安卓系统。</p><img src="/2023/01/14/Android-Treble%E8%AE%A1%E5%88%92/生成过程.png" style="zoom: 80%;"><ol><li>发布源码：Google将新系统源码发布至AOSP</li><li>启动硬件适配：芯片制造商如<strong>三星</strong>、<strong>高通</strong>、<strong>联发科</strong>、<strong>华为</strong>等对源码进行修改，确保自家的芯片在新版Android能正常运行和发挥性能</li><li>OEM适配：OEM 厂商进一步修改新系统</li><li>OEM测试：OEM 厂商对系统进行内部测试</li><li>推送给用户：试无误后的新版系统通过 OTA 推送给用户</li></ol><p>这样带来的问题是什么，用谷歌开发团队的话来说，整个过程会花费5-12个月的时间……寄🐓</p><p>虽然Google在提交AOSP源码上非常迅速，但是芯片制造商和OEM厂商往往因为技术问题、第三方系统定制原因等导致整体的进程偏慢，最终形成了用户茫茫然的等待，从以往的数据统计我们也可以看出，Android手机中新系统的覆盖率寥寥无几。</p><img src="/2023/01/14/Android-Treble%E8%AE%A1%E5%88%92/licheng.png" style="zoom: 50%;"><blockquote><p>可以看到自从安卓8.0退出Treble以来，安卓9.0开始突飞猛进，更新的用户几乎是8.0的一倍</p></blockquote><h2 id="2-Treble计划"><a href="#2-Treble计划" class="headerlink" title="2.Treble计划"></a>2.Treble计划</h2><h3 id="2-1-Treble简介"><a href="#2-1-Treble简介" class="headerlink" title="2.1 Treble简介"></a>2.1 Treble简介</h3><p>Android 8.0 版本的一项新元素是 Project Treble。这是 Android架构方面的一项重大改变，主要解决Android 版本碎片化问题，更方便快捷的升级到最新版本。其中最核心的一点是将AOSP代码和供应商（Vendor）代码做好解耦。贴一张张架构前后的对比图：</p><img src="/2023/01/14/Android-Treble%E8%AE%A1%E5%88%92/架构变化.png"><ul><li>升级前：Framework代码和Vendor的代码耦合，即使谷歌发布会完最新AOSP代码，设备厂商也需要花费很多时间处理和Vendor代码适配问题【Reworked】，所以升级会花费很大量的时间</li></ul><img src="/2023/01/14/Android-Treble%E8%AE%A1%E5%88%92/新架构.png"><ul><li>新的架构：Treble在Framework和Vendor实现代码中间定义一个稳定的接口，这样Framework代码和Vendor的代码实现解耦，这样设备厂商能够快速的升级AOSP，只要接口不变，系统还能正常起来。</li></ul><p>下面我们具体看一下以前的Framework层和HAL层是怎么交互的？</p><p><strong>Android O之前版本的框架：</strong></p><p>在此之前的Android 系统架构当中，Android Framework 与Android HAL是打包成一个system.img的，而且Framework 与HAL之间是紧耦合的，通过链接的方式使用相应的硬件相关so库。老版本的android 的系统框架当中framework与HAL之间的一般架构框架是：</p><img src="/2023/01/14/Android-Treble%E8%AE%A1%E5%88%92/框架.png"><p>所以每次Android framework的升级需要对应的Android HAL升级。所以这样每次Android 升级都需要Android 设备制造商投入大量的人力物理去升级相应的Vendor HAL Implemetation.</p><p><strong>Android O及之后的版本的框架：</strong></p><p>在Android O以及以后的版本当中，Android 更新了新的框架设计在新的框架设计当中，引入了一套叫HIDL的语言来定义Freamework与HAL之间的接口，新的架构如下图：</p><img src="/2023/01/14/Android-Treble%E8%AE%A1%E5%88%92/HIDL.png"><p>跟以往的Android 版本相比较，Android O里使用HIDL来解耦System Framework 与Vendor HAL Implemetation之间的关系【，从而简化降低Android系统升级的影响与难度。并且目前看起来，Android Framework与Vendor HAL Implemetation会存放在不同的分区当中，Android Framework会在system分区当中，而Vendor HAL Implemetation会在一个新定义的分区(Vendor.img)当中，这样刷新的system.img 才不会影响到Vendor HAL Implemetation。</p><p><strong>更清晰的调用关系</strong></p><img src="/2023/01/14/Android-Treble%E8%AE%A1%E5%88%92/O之前.png" style="zoom:70%;"><img src="/2023/01/14/Android-Treble%E8%AE%A1%E5%88%92/O之后.png" style="zoom:70%;"><h3 id="2-2-Treble新技术"><a href="#2-2-Treble新技术" class="headerlink" title="2.2 Treble新技术"></a>2.2 Treble新技术</h3><img src="/2023/01/14/Android-Treble%E8%AE%A1%E5%88%92/架构对比.png"><p><strong>Treble架构中为了实现系统和供应商的分离，引入了许多新技术。关键技术包括：</strong></p><ul><li>HIDL：HAL接口定义语言，用于指定HAL和其他用户之间的接口的一直接口描述语言(IDL)</li><li>HAL：运行Android8.0或者更高版本的设备必须支持使用HIDL语言编写的HAL，分为binderized HAL（绑定式）和passthrough HAL（直通式）。</li><li>设备树叠加层(DTO)：将设备数(DT)分割为主DT和叠加DT。叠加DT由ODM厂商提供，存放在ODM分区。通过对叠加DT的修改升级，可以实现在DT中增加设备节点和修改设备属性。</li><li>供应商原生开发套件(VNDK)：提供了一组让供应商实现其HAL的专用库。</li><li>供应商接口对象(VINTF)：用于汇总设备的相关信息并通过可查询的API提供该信息。</li><li>SELinux：Android8.0实现SELinux策略的模块化和兼容性，目标是使SOC供应商和ODM生产商能够以隔离方式自定义SELinux配置，而无需跨分区修改。</li></ul><h2 id="修改历史"><a href="#修改历史" class="headerlink" title="修改历史"></a>修改历史</h2><ul><li>2023&#x2F;01&#x2F;14：首次编写《Android-Treble计划》</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何搭建hexo部署到github</title>
    <link href="/2023/01/14/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAhexo%E9%83%A8%E7%BD%B2%E5%88%B0github/"/>
    <url>/2023/01/14/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAhexo%E9%83%A8%E7%BD%B2%E5%88%B0github/</url>
    
    <content type="html"><![CDATA[<blockquote><p>🏓本文的内容是记录搭建hexo博客，并且部署到github上<br>🐖哈哈哈，我就是课代表<br>🍔所有内容均来自于：<strong>B站CodeSheep</strong></p></blockquote><h2 id="1-安装Nodejs"><a href="#1-安装Nodejs" class="headerlink" title="1.安装Nodejs"></a>1.安装Nodejs</h2><h3 id="1-1-安装Nodejs"><a href="#1-1-安装Nodejs" class="headerlink" title="1.1 安装Nodejs"></a>1.1 安装Nodejs</h3><p>Nodejs官网：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><img src="/2023/01/14/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAhexo%E9%83%A8%E7%BD%B2%E5%88%B0github/nodejs安装.png" alt="image-20230114121402814" style="zoom: 67%;"><p>直接无脑下一步安装，安装完成后<code>node -v</code>查看版本确认是否安装成功</p><h3 id="1-2-更换镜像"><a href="#1-2-更换镜像" class="headerlink" title="1.2 更换镜像"></a>1.2 更换镜像</h3><p>由于npm包管理工具实在太慢了，所以打算使用淘宝镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g cnpm --registry=https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p>最后可以通过<code>cnpm -v</code>查看一下cnpm是否安装成功</p><img src="/2023/01/14/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAhexo%E9%83%A8%E7%BD%B2%E5%88%B0github/安装npm.png" alt="image-20230114121402814" style="zoom: 67%;"><h2 id="2-安装Hexo并初始化hexo项目"><a href="#2-安装Hexo并初始化hexo项目" class="headerlink" title="2.安装Hexo并初始化hexo项目"></a>2.安装Hexo并初始化hexo项目</h2><h3 id="2-1-安装hexo"><a href="#2-1-安装hexo" class="headerlink" title="2.1 安装hexo"></a>2.1 安装hexo</h3><p>先通过npm安装hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cnpm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>安装完成以后，可以通过<code>hexo -v</code> 查看是否安装成功</p><h3 id="2-2-初始化hexo项目"><a href="#2-2-初始化hexo项目" class="headerlink" title="2.2 初始化hexo项目"></a>2.2 初始化hexo项目</h3><ol><li>本地创建一个文件夹，用于存放hexo的所有内容</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir hexo-blog<br></code></pre></td></tr></table></figure><ol start="2"><li>进入该项目文件夹，进行初始化</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init<br></code></pre></td></tr></table></figure><ol start="3"><li>本地打开该项目</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo s<br></code></pre></td></tr></table></figure><p>通过<code>localhost:4000</code>进行访问</p><h3 id="2-3-创建一个新的项目"><a href="#2-3-创建一个新的项目" class="headerlink" title="2.3 创建一个新的项目"></a>2.3 创建一个新的项目</h3><p>创建自己的新博客</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new &quot;如何搭建hexo部署到github&quot;<br></code></pre></td></tr></table></figure><p>生成静态文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br></code></pre></td></tr></table></figure><p>启动项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo s<br></code></pre></td></tr></table></figure><p>通过<code>localhost:4000</code>进行访问</p><h2 id="3-将hexo部署到github"><a href="#3-将hexo部署到github" class="headerlink" title="3.将hexo部署到github"></a>3.将hexo部署到github</h2><h3 id="3-1-新建一个github仓库"><a href="#3-1-新建一个github仓库" class="headerlink" title="3.1 新建一个github仓库"></a>3.1 新建一个github仓库</h3><blockquote><p>这里需要注意一下，创建的仓库名必须与你的username是一样的，比如我的usrname是anmuxixixi，则创建的仓库名为anmuxixixi.github.io；详情见GitHub如何创建一个Page</p></blockquote><img src="/2023/01/14/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAhexo%E9%83%A8%E7%BD%B2%E5%88%B0github/创建github.jpg" alt="image-20230114121402814" style="zoom: 60%;"><h3 id="3-2-安卓hexo针对git的deploy组件"><a href="#3-2-安卓hexo针对git的deploy组件" class="headerlink" title="3.2 安卓hexo针对git的deploy组件"></a>3.2 安卓hexo针对git的deploy组件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cnpm install --save hexo-deployer-git<br></code></pre></td></tr></table></figure><img src="/2023/01/14/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAhexo%E9%83%A8%E7%BD%B2%E5%88%B0github/安装插件.png" alt="image-20230114121402814" style="zoom: 80%;"><h3 id="3-2-部署到github"><a href="#3-2-部署到github" class="headerlink" title="3.2 部署到github"></a>3.2 部署到github</h3><p>打开项目的<code>_config.xml</code>，设置<code>deploy</code>属性</p><img src="/2023/01/14/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAhexo%E9%83%A8%E7%BD%B2%E5%88%B0github/设置deploy.png" alt="image-20230114121402814" style="zoom: 80%;"><blockquote><p> 这个repo对应的仓库名就是我们的<strong>github仓库地址</strong></p></blockquote><p>将其部署到github上</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo cl</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>浏览器输入<code>https://anmuxixixi.github.io/</code></p><img src="/2023/01/14/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAhexo%E9%83%A8%E7%BD%B2%E5%88%B0github/打开仓库.png" alt="image-20230114121402814" style="zoom: 50%;"><h2 id="4-设置主题"><a href="#4-设置主题" class="headerlink" title="4.设置主题"></a>4.设置主题</h2><h3 id="4-1-安装主题"><a href="#4-1-安装主题" class="headerlink" title="4.1 安装主题"></a>4.1 安装主题</h3><ul><li>Hexo官方设置主题的网站：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></li><li>Fluid主题：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></li><li>Fluid主题文档：<a href="https://hexo.fluid-dev.com/docs/guide/">https://hexo.fluid-dev.com/docs/guide/</a></li></ul><p>打开github，下载好Fluid主题，将其解压放在themes文件夹下</p><img src="/2023/01/14/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAhexo%E9%83%A8%E7%BD%B2%E5%88%B0github/下载主题.png" alt="image-20230114121402814" style="zoom: 80%;"><p>打开<code>_config.xml</code>，设置<code>theme</code>为<code>fluid</code>，设置<code>language</code>为<code>zh-CN</code></p><p>启动后看下整体的效果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s<br></code></pre></td></tr></table></figure><h3 id="4-2-简单的页面设置"><a href="#4-2-简单的页面设置" class="headerlink" title="4.2 简单的页面设置"></a>4.2 简单的页面设置</h3><ol><li>修改网页导航栏标题</li></ol><img src="/2023/01/14/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAhexo%E9%83%A8%E7%BD%B2%E5%88%B0github/修改网页标题.png" alt="image-20230114203236266" style="zoom:67%;"><p>其对应的效果如下</p><img src="/2023/01/14/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAhexo%E9%83%A8%E7%BD%B2%E5%88%B0github/标题栏.png"><ol start="2"><li>修改背景图片</li></ol><p>自己复制一张图片，将名字修改为<code>default.png</code></p><img src="/2023/01/14/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAhexo%E9%83%A8%E7%BD%B2%E5%88%B0github/背景.png"><ol start="3"><li>修改中间打字机文字</li></ol><img src="/2023/01/14/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAhexo%E9%83%A8%E7%BD%B2%E5%88%B0github/打字机.png" alt="image-20230114203653973" style="zoom:79%;"><ol start="4"><li>整体效果如下</li></ol><p><a href="https://anmuxixixi.github.io/">https://anmuxixixi.github.io/</a></p><p>欢迎品尝🌭</p><img src="/2023/01/14/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAhexo%E9%83%A8%E7%BD%B2%E5%88%B0github/zhengti.png">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/14/hello-world/"/>
    <url>/2023/01/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
